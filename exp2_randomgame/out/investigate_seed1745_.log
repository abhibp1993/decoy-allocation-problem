2023-09-16 04:00:28.245 | DEBUG    | solvers:solve_base_game:570 - Base game solved. 
Final: {64, 70, 42, 75, 124, 113, 116, 25, 60}.
Winning nodes P2: {1, 2, 4, 8, 9, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 38, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 56, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 85, 86, 87, 89, 90, 91, 92, 95, 96, 98, 101, 102, 103, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149}.
Winning nodes P1: {0, 3, 5, 6, 7, 136, 10, 11, 142, 15, 16, 145, 29, 32, 37, 39, 43, 45, 46, 47, 55, 57, 58, 59, 61, 62, 72, 77, 78, 82, 83, 84, 88, 93, 94, 97, 99, 100, 104, 107, 108, 119, 120, 127}.
2023-09-16 04:00:28.246 | DEBUG    | solvers:solve:257 - Solving base game.
2023-09-16 04:00:28.261 | DEBUG    | solvers:solve_p2game:555 - P2 game solved. 
Final: {64, 70, 42, 75, 124, 113, 116, 25, 60}, Fakes: {105}
Winning nodes P2: {1, 2, 4, 8, 9, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 38, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 56, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 85, 86, 87, 89, 90, 91, 92, 95, 96, 98, 101, 102, 103, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149}.
Winning nodes P1: {0, 3, 5, 6, 7, 136, 10, 11, 142, 15, 16, 145, 29, 32, 37, 39, 43, 45, 46, 47, 55, 57, 58, 59, 61, 62, 72, 77, 78, 82, 83, 84, 88, 93, 94, 97, 99, 100, 104, 107, 108, 119, 120, 127}.
2023-09-16 04:00:28.292 | DEBUG    | solvers:solve:279 - Hypergame: 
Nodes:[(1, {'turn': 2, 'label': set()}), (2, {'turn': 2, 'label': set()}), (4, {'turn': 2, 'label': set()}), (8, {'turn': 2, 'label': set()}), (9, {'turn': 2, 'label': set()}), (12, {'turn': 1, 'label': set()}), (13, {'turn': 1, 'label': set()}), (14, {'turn': 1, 'label': set()}), (17, {'turn': 1, 'label': set()}), (18, {'turn': 1, 'label': set()}), (19, {'turn': 2, 'label': set()}), (20, {'turn': 2, 'label': set()}), (21, {'turn': 2, 'label': set()}), (22, {'turn': 1, 'label': set()}), (23, {'turn': 2, 'label': set()}), (24, {'turn': 2, 'label': set()}), (25, {'turn': 2, 'label': {'goal'}}), (26, {'turn': 1, 'label': set()}), (27, {'turn': 2, 'label': set()}), (28, {'turn': 1, 'label': set()}), (30, {'turn': 1, 'label': set()}), (31, {'turn': 1, 'label': set()}), (33, {'turn': 2, 'label': set()}), (34, {'turn': 1, 'label': set()}), (35, {'turn': 1, 'label': set()}), (36, {'turn': 1, 'label': set()}), (38, {'turn': 2, 'label': set()}), (40, {'turn': 2, 'label': set()}), (41, {'turn': 2, 'label': set()}), (42, {'turn': 2, 'label': {'goal'}}), (44, {'turn': 2, 'label': set()}), (48, {'turn': 1, 'label': set()}), (49, {'turn': 1, 'label': set()}), (50, {'turn': 2, 'label': set()}), (51, {'turn': 1, 'label': set()}), (52, {'turn': 2, 'label': set()}), (53, {'turn': 1, 'label': set()}), (54, {'turn': 2, 'label': set()}), (56, {'turn': 2, 'label': set()}), (60, {'turn': 1, 'label': {'goal'}}), (63, {'turn': 1, 'label': set()}), (64, {'turn': 1, 'label': {'goal'}}), (65, {'turn': 2, 'label': set()}), (66, {'turn': 1, 'label': set()}), (67, {'turn': 1, 'label': set()}), (68, {'turn': 1, 'label': set()}), (69, {'turn': 2, 'label': set()}), (70, {'turn': 2, 'label': {'goal'}}), (71, {'turn': 1, 'label': set()}), (73, {'turn': 2, 'label': set()}), (74, {'turn': 2, 'label': set()}), (75, {'turn': 1, 'label': {'goal'}}), (76, {'turn': 2, 'label': set()}), (79, {'turn': 2, 'label': set()}), (80, {'turn': 1, 'label': set()}), (81, {'turn': 2, 'label': set()}), (85, {'turn': 2, 'label': set()}), (86, {'turn': 2, 'label': set()}), (87, {'turn': 2, 'label': set()}), (89, {'turn': 2, 'label': set()}), (90, {'turn': 2, 'label': set()}), (91, {'turn': 1, 'label': set()}), (92, {'turn': 2, 'label': set()}), (95, {'turn': 1, 'label': set()}), (96, {'turn': 2, 'label': set()}), (98, {'turn': 2, 'label': set()}), (101, {'turn': 1, 'label': set()}), (102, {'turn': 1, 'label': set()}), (103, {'turn': 1, 'label': set()}), (105, {'turn': 1, 'label': set()}), (106, {'turn': 1, 'label': set()}), (109, {'turn': 2, 'label': set()}), (110, {'turn': 2, 'label': set()}), (111, {'turn': 1, 'label': set()}), (112, {'turn': 2, 'label': set()}), (113, {'turn': 2, 'label': {'goal'}}), (114, {'turn': 1, 'label': set()}), (115, {'turn': 2, 'label': set()}), (116, {'turn': 1, 'label': {'goal'}}), (117, {'turn': 1, 'label': set()}), (118, {'turn': 1, 'label': set()}), (121, {'turn': 2, 'label': set()}), (122, {'turn': 2, 'label': set()}), (123, {'turn': 2, 'label': set()}), (124, {'turn': 2, 'label': {'goal'}}), (125, {'turn': 1, 'label': set()}), (126, {'turn': 2, 'label': set()}), (128, {'turn': 1, 'label': set()}), (129, {'turn': 2, 'label': set()}), (130, {'turn': 2, 'label': set()}), (131, {'turn': 2, 'label': set()}), (132, {'turn': 2, 'label': set()}), (133, {'turn': 2, 'label': set()}), (134, {'turn': 1, 'label': set()}), (135, {'turn': 1, 'label': set()}), (137, {'turn': 2, 'label': set()}), (138, {'turn': 1, 'label': set()}), (139, {'turn': 1, 'label': set()}), (140, {'turn': 2, 'label': set()}), (141, {'turn': 2, 'label': set()}), (143, {'turn': 1, 'label': set()}), (144, {'turn': 2, 'label': set()}), (146, {'turn': 1, 'label': set()}), (147, {'turn': 2, 'label': set()}), (148, {'turn': 2, 'label': set()}), (149, {'turn': 2, 'label': set()})], 
Edges:[(1, 95, 'b2'), (2, 66, 'b0'), (4, 103, 'b2'), (8, 106, 'b2'), (9, 53, 'b1'), (12, 54, 'a0'), (13, 123, 'a1'), (13, 149, 'a0'), (14, 109, 'a2'), (14, 20, 'a1'), (14, 148, 'a4'), (14, 98, 'a3'), (14, 141, 'a0'), (17, 144, 'a2'), (17, 113, 'a1'), (17, 33, 'a4'), (17, 86, 'a3'), (17, 79, 'a0'), (18, 44, 'a0'), (19, 66, 'b0'), (20, 66, 'b1'), (20, 103, 'b3'), (21, 117, 'b2'), (22, 2, 'a0'), (23, 105, 'b0'), (24, 13, 'b2'), (26, 144, 'a0'), (27, 106, 'b3'), (28, 137, 'a1'), (28, 87, 'a0'), (28, 44, 'a2'), (30, 69, 'a1'), (30, 133, 'a0'), (30, 23, 'a2'), (31, 140, 'a1'), (31, 131, 'a0'), (33, 116, 'b1'), (33, 60, 'b0'), (34, 86, 'a0'), (35, 23, 'a0'), (36, 74, 'a0'), (38, 116, 'b3'), (40, 12, 'b1'), (40, 146, 'b4'), (41, 63, 'b0'), (42, 42, 'b1'), (44, 51, 'b1'), (48, 133, 'a1'), (48, 131, 'a0'), (48, 33, 'a2'), (49, 122, 'a2'), (49, 9, 'a1'), (49, 56, 'a4'), (49, 79, 'a3'), (49, 121, 'a0'), (50, 34, 'b3'), (51, 65, 'a1'), (51, 40, 'a0'), (51, 54, 'a2'), (52, 63, 'b0'), (53, 109, 'a1'), (53, 115, 'a0'), (54, 26, 'b0'), (56, 114, 'b0'), (60, 60, 'a0'), (63, 130, 'a0'), (65, 111, 'b0'), (66, 23, 'a3'), (66, 54, 'a1'), (66, 133, 'a0'), (66, 81, 'a2'), (67, 69, 'a3'), (67, 69, 'a1'), (67, 42, 'a0'), (67, 90, 'a2'), (68, 121, 'a2'), (68, 130, 'a1'), (68, 25, 'a4'), (68, 141, 'a3'), (68, 115, 'a0'), (69, 14, 'b1'), (70, 70, 'b2'), (70, 70, 'b1'), (70, 70, 'b3'), (71, 110, 'a1'), (71, 24, 'a0'), (73, 12, 'b3'), (74, 17, 'b2'), (75, 75, 'a3'), (75, 75, 'a1'), (75, 75, 'a0'), (75, 75, 'a2'), (76, 60, 'b2'), (79, 134, 'b1'), (80, 2, 'a1'), (80, 147, 'a0'), (80, 1, 'a2'), (81, 117, 'b0'), (85, 51, 'b3'), (86, 26, 'b2'), (87, 60, 'b1'), (87, 105, 'b0'), (89, 139, 'b0'), (90, 105, 'b0'), (91, 8, 'a1'), (91, 50, 'a0'), (91, 44, 'a2'), (92, 22, 'b2'), (95, 85, 'a3'), (95, 65, 'a1'), (95, 25, 'a0'), (95, 20, 'a2'), (96, 116, 'b0'), (98, 125, 'b1'), (101, 96, 'a3'), (101, 126, 'a1'), (101, 69, 'a0'), (101, 85, 'a2'), (102, 92, 'a2'), (102, 109, 'a1'), (102, 147, 'a4'), (102, 54, 'a3'), (102, 131, 'a0'), (103, 73, 'a1'), (103, 81, 'a0'), (103, 42, 'a2'), (105, 105, 'a0'), (106, 40, 'a0'), (109, 36, 'b2'), (109, 48, 'b0'), (110, 117, 'b0'), (111, 123, 'a1'), (111, 148, 'a0'), (111, 21, 'a2'), (112, 53, 'b0'), (113, 113, 'b0'), (113, 113, 'b4'), (113, 113, 'b3'), (114, 41, 'a1'), (114, 129, 'a0'), (115, 13, 'b1'), (116, 116, 'a2'), (116, 116, 'a1'), (116, 116, 'a4'), (117, 148, 'a0'), (118, 122, 'a2'), (118, 122, 'a4'), (118, 144, 'a1'), (118, 130, 'a3'), (118, 79, 'a0'), (121, 139, 'b0'), (122, 117, 'b4'), (123, 116, 'b2'), (124, 124, 'b1'), (125, 92, 'a1'), (125, 19, 'a0'), (126, 111, 'b0'), (128, 41, 'a1'), (128, 54, 'a0'), (129, 135, 'b0'), (130, 116, 'b0'), (131, 118, 'b4'), (132, 26, 'b1'), (133, 12, 'b0'), (134, 148, 'a0'), (135, 73, 'a1'), (135, 27, 'a0'), (137, 22, 'b0'), (138, 85, 'a0'), (139, 90, 'a1'), (139, 137, 'a0'), (139, 8, 'a2'), (140, 13, 'b0'), (141, 95, 'b1'), (141, 95, 'b0'), (143, 9, 'a0'), (144, 105, 'b1'), (146, 76, 'a1'), (146, 147, 'a0'), (147, 26, 'b2'), (148, 13, 'b1'), (149, 64, 'b1')]
2023-09-16 04:00:28.293 | DEBUG    | solvers:solve:280 - Base game solved. 
Final: {105}.
Winning nodes P2: {130, 134, 140, 13, 148, 21, 149, 24, 25, 33, 38, 41, 42, 52, 60, 63, 64, 65, 70, 71, 75, 76, 79, 81, 87, 96, 110, 111, 113, 115, 116, 117, 122, 123, 124, 126}.
Winning nodes P1: {128, 1, 2, 131, 132, 133, 129, 135, 4, 137, 138, 139, 12, 8, 14, 9, 144, 17, 146, 19, 147, 18, 22, 23, 20, 26, 27, 28, 30, 31, 34, 35, 36, 40, 44, 48, 49, 50, 51, 53, 54, 56, 66, 67, 68, 69, 141, 73, 74, 80, 143, 85, 86, 89, 90, 91, 92, 95, 98, 101, 102, 103, 105, 106, 109, 112, 114, 118, 121, 125}.
2023-09-16 04:00:28.294 | DEBUG    | solvers:solve:298 - Value of deception: 0.7216494845360825
2023-09-16 04:00:28.294 | SUCCESS  | __main__:<module>:31 - Q. What is VoD if first fake was placed at where the first trap was placed?
A. VoD(daswin, trap={105})=0.7113, VoD(dswin,fake={105})=0.7216494845360825
2023-09-16 04:00:28.295 | DEBUG    | solvers:solve:257 - Solving base game.
2023-09-16 04:00:28.310 | DEBUG    | solvers:solve_p2game:555 - P2 game solved. 
Final: {64, 70, 42, 75, 124, 113, 116, 25, 60}, Fakes: {105, 123}
Winning nodes P2: {1, 2, 4, 8, 9, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 38, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 56, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 85, 86, 87, 89, 90, 91, 92, 95, 96, 98, 101, 102, 103, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149}.
Winning nodes P1: {0, 3, 5, 6, 7, 136, 10, 11, 142, 15, 16, 145, 29, 32, 37, 39, 43, 45, 46, 47, 55, 57, 58, 59, 61, 62, 72, 77, 78, 82, 83, 84, 88, 93, 94, 97, 99, 100, 104, 107, 108, 119, 120, 127}.
2023-09-16 04:00:28.319 | DEBUG    | solvers:solve:279 - Hypergame: 
Nodes:[(1, {'turn': 2, 'label': set()}), (2, {'turn': 2, 'label': set()}), (4, {'turn': 2, 'label': set()}), (8, {'turn': 2, 'label': set()}), (9, {'turn': 2, 'label': set()}), (12, {'turn': 1, 'label': set()}), (13, {'turn': 1, 'label': set()}), (14, {'turn': 1, 'label': set()}), (17, {'turn': 1, 'label': set()}), (18, {'turn': 1, 'label': set()}), (19, {'turn': 2, 'label': set()}), (20, {'turn': 2, 'label': set()}), (21, {'turn': 2, 'label': set()}), (22, {'turn': 1, 'label': set()}), (23, {'turn': 2, 'label': set()}), (24, {'turn': 2, 'label': set()}), (25, {'turn': 2, 'label': {'goal'}}), (26, {'turn': 1, 'label': set()}), (27, {'turn': 2, 'label': set()}), (28, {'turn': 1, 'label': set()}), (30, {'turn': 1, 'label': set()}), (31, {'turn': 1, 'label': set()}), (33, {'turn': 2, 'label': set()}), (34, {'turn': 1, 'label': set()}), (35, {'turn': 1, 'label': set()}), (36, {'turn': 1, 'label': set()}), (38, {'turn': 2, 'label': set()}), (40, {'turn': 2, 'label': set()}), (41, {'turn': 2, 'label': set()}), (42, {'turn': 2, 'label': {'goal'}}), (44, {'turn': 2, 'label': set()}), (48, {'turn': 1, 'label': set()}), (49, {'turn': 1, 'label': set()}), (50, {'turn': 2, 'label': set()}), (51, {'turn': 1, 'label': set()}), (52, {'turn': 2, 'label': set()}), (53, {'turn': 1, 'label': set()}), (54, {'turn': 2, 'label': set()}), (56, {'turn': 2, 'label': set()}), (60, {'turn': 1, 'label': {'goal'}}), (63, {'turn': 1, 'label': set()}), (64, {'turn': 1, 'label': {'goal'}}), (65, {'turn': 2, 'label': set()}), (66, {'turn': 1, 'label': set()}), (67, {'turn': 1, 'label': set()}), (68, {'turn': 1, 'label': set()}), (69, {'turn': 2, 'label': set()}), (70, {'turn': 2, 'label': {'goal'}}), (71, {'turn': 1, 'label': set()}), (73, {'turn': 2, 'label': set()}), (74, {'turn': 2, 'label': set()}), (75, {'turn': 1, 'label': {'goal'}}), (76, {'turn': 2, 'label': set()}), (79, {'turn': 2, 'label': set()}), (80, {'turn': 1, 'label': set()}), (81, {'turn': 2, 'label': set()}), (85, {'turn': 2, 'label': set()}), (86, {'turn': 2, 'label': set()}), (87, {'turn': 2, 'label': set()}), (89, {'turn': 2, 'label': set()}), (90, {'turn': 2, 'label': set()}), (91, {'turn': 1, 'label': set()}), (92, {'turn': 2, 'label': set()}), (95, {'turn': 1, 'label': set()}), (96, {'turn': 2, 'label': set()}), (98, {'turn': 2, 'label': set()}), (101, {'turn': 1, 'label': set()}), (102, {'turn': 1, 'label': set()}), (103, {'turn': 1, 'label': set()}), (105, {'turn': 1, 'label': set()}), (106, {'turn': 1, 'label': set()}), (109, {'turn': 2, 'label': set()}), (110, {'turn': 2, 'label': set()}), (111, {'turn': 1, 'label': set()}), (112, {'turn': 2, 'label': set()}), (113, {'turn': 2, 'label': {'goal'}}), (114, {'turn': 1, 'label': set()}), (115, {'turn': 2, 'label': set()}), (116, {'turn': 1, 'label': {'goal'}}), (117, {'turn': 1, 'label': set()}), (118, {'turn': 1, 'label': set()}), (121, {'turn': 2, 'label': set()}), (122, {'turn': 2, 'label': set()}), (123, {'turn': 2, 'label': set()}), (124, {'turn': 2, 'label': {'goal'}}), (125, {'turn': 1, 'label': set()}), (126, {'turn': 2, 'label': set()}), (128, {'turn': 1, 'label': set()}), (129, {'turn': 2, 'label': set()}), (130, {'turn': 2, 'label': set()}), (131, {'turn': 2, 'label': set()}), (132, {'turn': 2, 'label': set()}), (133, {'turn': 2, 'label': set()}), (134, {'turn': 1, 'label': set()}), (135, {'turn': 1, 'label': set()}), (137, {'turn': 2, 'label': set()}), (138, {'turn': 1, 'label': set()}), (139, {'turn': 1, 'label': set()}), (140, {'turn': 2, 'label': set()}), (141, {'turn': 2, 'label': set()}), (143, {'turn': 1, 'label': set()}), (144, {'turn': 2, 'label': set()}), (146, {'turn': 1, 'label': set()}), (147, {'turn': 2, 'label': set()}), (148, {'turn': 2, 'label': set()}), (149, {'turn': 2, 'label': set()})], 
Edges:[(1, 95, 'b2'), (2, 66, 'b0'), (4, 103, 'b2'), (8, 106, 'b2'), (9, 53, 'b1'), (12, 54, 'a0'), (13, 123, 'a1'), (13, 149, 'a0'), (14, 109, 'a2'), (14, 20, 'a1'), (14, 148, 'a4'), (14, 98, 'a3'), (14, 141, 'a0'), (17, 144, 'a2'), (17, 113, 'a1'), (17, 33, 'a4'), (17, 86, 'a3'), (17, 79, 'a0'), (18, 44, 'a0'), (19, 66, 'b0'), (20, 66, 'b1'), (20, 103, 'b3'), (21, 117, 'b2'), (22, 2, 'a0'), (23, 105, 'b0'), (24, 13, 'b2'), (26, 144, 'a0'), (27, 106, 'b3'), (28, 137, 'a1'), (28, 87, 'a0'), (28, 44, 'a2'), (30, 69, 'a1'), (30, 133, 'a0'), (30, 23, 'a2'), (31, 140, 'a1'), (31, 131, 'a0'), (33, 116, 'b1'), (33, 60, 'b0'), (34, 86, 'a0'), (35, 23, 'a0'), (36, 74, 'a0'), (38, 116, 'b3'), (40, 12, 'b1'), (40, 146, 'b4'), (41, 63, 'b0'), (42, 42, 'b1'), (44, 51, 'b1'), (48, 133, 'a1'), (48, 131, 'a0'), (48, 33, 'a2'), (49, 122, 'a2'), (49, 9, 'a1'), (49, 56, 'a4'), (49, 79, 'a3'), (49, 121, 'a0'), (50, 34, 'b3'), (51, 65, 'a1'), (51, 40, 'a0'), (51, 54, 'a2'), (52, 63, 'b0'), (53, 109, 'a1'), (53, 115, 'a0'), (54, 26, 'b0'), (56, 114, 'b0'), (60, 60, 'a0'), (63, 130, 'a0'), (65, 111, 'b0'), (66, 23, 'a3'), (66, 54, 'a1'), (66, 133, 'a0'), (66, 81, 'a2'), (67, 69, 'a3'), (67, 69, 'a1'), (67, 42, 'a0'), (67, 90, 'a2'), (68, 121, 'a2'), (68, 130, 'a1'), (68, 25, 'a4'), (68, 141, 'a3'), (68, 115, 'a0'), (69, 14, 'b1'), (70, 70, 'b2'), (70, 70, 'b1'), (70, 70, 'b3'), (71, 110, 'a1'), (71, 24, 'a0'), (73, 12, 'b3'), (74, 17, 'b2'), (75, 75, 'a3'), (75, 75, 'a1'), (75, 75, 'a0'), (75, 75, 'a2'), (76, 60, 'b2'), (79, 134, 'b1'), (80, 2, 'a1'), (80, 147, 'a0'), (80, 1, 'a2'), (81, 117, 'b0'), (85, 51, 'b3'), (86, 26, 'b2'), (87, 60, 'b1'), (87, 105, 'b0'), (89, 139, 'b0'), (90, 105, 'b0'), (91, 8, 'a1'), (91, 50, 'a0'), (91, 44, 'a2'), (92, 22, 'b2'), (95, 85, 'a3'), (95, 65, 'a1'), (95, 25, 'a0'), (95, 20, 'a2'), (96, 116, 'b0'), (98, 125, 'b1'), (101, 96, 'a3'), (101, 126, 'a1'), (101, 69, 'a0'), (101, 85, 'a2'), (102, 92, 'a2'), (102, 109, 'a1'), (102, 147, 'a4'), (102, 54, 'a3'), (102, 131, 'a0'), (103, 73, 'a1'), (103, 81, 'a0'), (103, 42, 'a2'), (105, 105, 'a0'), (106, 40, 'a0'), (109, 36, 'b2'), (109, 48, 'b0'), (110, 117, 'b0'), (111, 123, 'a1'), (111, 148, 'a0'), (111, 21, 'a2'), (112, 53, 'b0'), (113, 113, 'b0'), (113, 113, 'b4'), (113, 113, 'b3'), (114, 41, 'a1'), (114, 129, 'a0'), (115, 13, 'b1'), (116, 116, 'a2'), (116, 116, 'a1'), (116, 116, 'a4'), (117, 148, 'a0'), (118, 122, 'a2'), (118, 122, 'a4'), (118, 144, 'a1'), (118, 130, 'a3'), (118, 79, 'a0'), (121, 139, 'b0'), (122, 117, 'b4'), (123, 123, 'b2'), (123, 123, 'b3'), (123, 123, 'b0'), (124, 124, 'b1'), (125, 92, 'a1'), (125, 19, 'a0'), (126, 111, 'b0'), (128, 41, 'a1'), (128, 54, 'a0'), (129, 135, 'b0'), (130, 116, 'b0'), (131, 118, 'b4'), (132, 26, 'b1'), (133, 12, 'b0'), (134, 148, 'a0'), (135, 73, 'a1'), (135, 27, 'a0'), (137, 22, 'b0'), (138, 85, 'a0'), (139, 90, 'a1'), (139, 137, 'a0'), (139, 8, 'a2'), (140, 13, 'b0'), (141, 95, 'b1'), (141, 95, 'b0'), (143, 9, 'a0'), (144, 105, 'b1'), (146, 76, 'a1'), (146, 147, 'a0'), (147, 26, 'b2'), (148, 13, 'b1'), (149, 64, 'b1')]
2023-09-16 04:00:28.320 | DEBUG    | solvers:solve:280 - Base game solved. 
Final: {105, 123}.
Winning nodes P2: {130, 149, 25, 33, 38, 41, 42, 52, 60, 63, 64, 70, 75, 76, 87, 96, 113, 116, 124}.
Winning nodes P1: {1, 2, 4, 8, 9, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 34, 35, 36, 40, 44, 48, 49, 50, 51, 53, 54, 56, 65, 66, 67, 68, 69, 71, 73, 74, 79, 80, 81, 85, 86, 89, 90, 91, 92, 95, 98, 101, 102, 103, 105, 106, 109, 110, 111, 112, 114, 115, 117, 118, 121, 122, 123, 125, 126, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148}.
2023-09-16 04:00:28.320 | DEBUG    | solvers:solve:298 - Value of deception: 0.8969072164948454
2023-09-16 04:00:28.321 | SUCCESS  | __main__:<module>:37 - Q. What is VoD if first two fakes were placed at where the first two traps were placed?
A. VoD(daswin, trap={105, 123})=0.8969, VoD(dswin,fake={105, 123})=0.8969072164948454
2023-09-16 04:00:28.321 | DEBUG    | solvers:solve:257 - Solving base game.
2023-09-16 04:00:28.351 | DEBUG    | solvers:solve_p2game:555 - P2 game solved. 
Final: {64, 70, 42, 75, 124, 113, 116, 25, 60}, Fakes: {105, 130, 123}
Winning nodes P2: {1, 2, 4, 8, 9, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 38, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 56, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 85, 86, 87, 89, 90, 91, 92, 95, 96, 98, 101, 102, 103, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149}.
Winning nodes P1: {0, 3, 5, 6, 7, 136, 10, 11, 142, 15, 16, 145, 29, 32, 37, 39, 43, 45, 46, 47, 55, 57, 58, 59, 61, 62, 72, 77, 78, 82, 83, 84, 88, 93, 94, 97, 99, 100, 104, 107, 108, 119, 120, 127}.
2023-09-16 04:00:28.359 | DEBUG    | solvers:solve:279 - Hypergame: 
Nodes:[(1, {'turn': 2, 'label': set()}), (2, {'turn': 2, 'label': set()}), (4, {'turn': 2, 'label': set()}), (8, {'turn': 2, 'label': set()}), (9, {'turn': 2, 'label': set()}), (12, {'turn': 1, 'label': set()}), (13, {'turn': 1, 'label': set()}), (14, {'turn': 1, 'label': set()}), (17, {'turn': 1, 'label': set()}), (18, {'turn': 1, 'label': set()}), (19, {'turn': 2, 'label': set()}), (20, {'turn': 2, 'label': set()}), (21, {'turn': 2, 'label': set()}), (22, {'turn': 1, 'label': set()}), (23, {'turn': 2, 'label': set()}), (24, {'turn': 2, 'label': set()}), (25, {'turn': 2, 'label': {'goal'}}), (26, {'turn': 1, 'label': set()}), (27, {'turn': 2, 'label': set()}), (28, {'turn': 1, 'label': set()}), (30, {'turn': 1, 'label': set()}), (31, {'turn': 1, 'label': set()}), (33, {'turn': 2, 'label': set()}), (34, {'turn': 1, 'label': set()}), (35, {'turn': 1, 'label': set()}), (36, {'turn': 1, 'label': set()}), (38, {'turn': 2, 'label': set()}), (40, {'turn': 2, 'label': set()}), (41, {'turn': 2, 'label': set()}), (42, {'turn': 2, 'label': {'goal'}}), (44, {'turn': 2, 'label': set()}), (48, {'turn': 1, 'label': set()}), (49, {'turn': 1, 'label': set()}), (50, {'turn': 2, 'label': set()}), (51, {'turn': 1, 'label': set()}), (52, {'turn': 2, 'label': set()}), (53, {'turn': 1, 'label': set()}), (54, {'turn': 2, 'label': set()}), (56, {'turn': 2, 'label': set()}), (60, {'turn': 1, 'label': {'goal'}}), (63, {'turn': 1, 'label': set()}), (64, {'turn': 1, 'label': {'goal'}}), (65, {'turn': 2, 'label': set()}), (66, {'turn': 1, 'label': set()}), (67, {'turn': 1, 'label': set()}), (68, {'turn': 1, 'label': set()}), (69, {'turn': 2, 'label': set()}), (70, {'turn': 2, 'label': {'goal'}}), (71, {'turn': 1, 'label': set()}), (73, {'turn': 2, 'label': set()}), (74, {'turn': 2, 'label': set()}), (75, {'turn': 1, 'label': {'goal'}}), (76, {'turn': 2, 'label': set()}), (79, {'turn': 2, 'label': set()}), (80, {'turn': 1, 'label': set()}), (81, {'turn': 2, 'label': set()}), (85, {'turn': 2, 'label': set()}), (86, {'turn': 2, 'label': set()}), (87, {'turn': 2, 'label': set()}), (89, {'turn': 2, 'label': set()}), (90, {'turn': 2, 'label': set()}), (91, {'turn': 1, 'label': set()}), (92, {'turn': 2, 'label': set()}), (95, {'turn': 1, 'label': set()}), (96, {'turn': 2, 'label': set()}), (98, {'turn': 2, 'label': set()}), (101, {'turn': 1, 'label': set()}), (102, {'turn': 1, 'label': set()}), (103, {'turn': 1, 'label': set()}), (105, {'turn': 1, 'label': set()}), (106, {'turn': 1, 'label': set()}), (109, {'turn': 2, 'label': set()}), (110, {'turn': 2, 'label': set()}), (111, {'turn': 1, 'label': set()}), (112, {'turn': 2, 'label': set()}), (113, {'turn': 2, 'label': {'goal'}}), (114, {'turn': 1, 'label': set()}), (115, {'turn': 2, 'label': set()}), (116, {'turn': 1, 'label': {'goal'}}), (117, {'turn': 1, 'label': set()}), (118, {'turn': 1, 'label': set()}), (121, {'turn': 2, 'label': set()}), (122, {'turn': 2, 'label': set()}), (123, {'turn': 2, 'label': set()}), (124, {'turn': 2, 'label': {'goal'}}), (125, {'turn': 1, 'label': set()}), (126, {'turn': 2, 'label': set()}), (128, {'turn': 1, 'label': set()}), (129, {'turn': 2, 'label': set()}), (130, {'turn': 2, 'label': set()}), (131, {'turn': 2, 'label': set()}), (132, {'turn': 2, 'label': set()}), (133, {'turn': 2, 'label': set()}), (134, {'turn': 1, 'label': set()}), (135, {'turn': 1, 'label': set()}), (137, {'turn': 2, 'label': set()}), (138, {'turn': 1, 'label': set()}), (139, {'turn': 1, 'label': set()}), (140, {'turn': 2, 'label': set()}), (141, {'turn': 2, 'label': set()}), (143, {'turn': 1, 'label': set()}), (144, {'turn': 2, 'label': set()}), (146, {'turn': 1, 'label': set()}), (147, {'turn': 2, 'label': set()}), (148, {'turn': 2, 'label': set()}), (149, {'turn': 2, 'label': set()})], 
Edges:[(1, 95, 'b2'), (2, 66, 'b0'), (4, 103, 'b2'), (8, 106, 'b2'), (9, 53, 'b1'), (12, 54, 'a0'), (13, 123, 'a1'), (13, 149, 'a0'), (14, 109, 'a2'), (14, 20, 'a1'), (14, 148, 'a4'), (14, 98, 'a3'), (14, 141, 'a0'), (17, 144, 'a2'), (17, 113, 'a1'), (17, 33, 'a4'), (17, 86, 'a3'), (17, 79, 'a0'), (18, 44, 'a0'), (19, 66, 'b0'), (20, 66, 'b1'), (20, 103, 'b3'), (21, 117, 'b2'), (22, 2, 'a0'), (23, 105, 'b0'), (24, 13, 'b2'), (26, 144, 'a0'), (27, 106, 'b3'), (28, 137, 'a1'), (28, 87, 'a0'), (28, 44, 'a2'), (30, 69, 'a1'), (30, 133, 'a0'), (30, 23, 'a2'), (31, 140, 'a1'), (31, 131, 'a0'), (33, 116, 'b1'), (33, 60, 'b0'), (34, 86, 'a0'), (35, 23, 'a0'), (36, 74, 'a0'), (38, 116, 'b3'), (40, 12, 'b1'), (40, 146, 'b4'), (41, 63, 'b0'), (42, 42, 'b1'), (44, 51, 'b1'), (48, 133, 'a1'), (48, 131, 'a0'), (48, 33, 'a2'), (49, 122, 'a2'), (49, 9, 'a1'), (49, 56, 'a4'), (49, 79, 'a3'), (49, 121, 'a0'), (50, 34, 'b3'), (51, 65, 'a1'), (51, 40, 'a0'), (51, 54, 'a2'), (52, 63, 'b0'), (53, 109, 'a1'), (53, 115, 'a0'), (54, 26, 'b0'), (56, 114, 'b0'), (60, 60, 'a0'), (63, 130, 'a0'), (65, 111, 'b0'), (66, 23, 'a3'), (66, 54, 'a1'), (66, 133, 'a0'), (66, 81, 'a2'), (67, 69, 'a3'), (67, 69, 'a1'), (67, 42, 'a0'), (67, 90, 'a2'), (68, 121, 'a2'), (68, 130, 'a1'), (68, 25, 'a4'), (68, 141, 'a3'), (68, 115, 'a0'), (69, 14, 'b1'), (70, 70, 'b2'), (70, 70, 'b1'), (70, 70, 'b3'), (71, 110, 'a1'), (71, 24, 'a0'), (73, 12, 'b3'), (74, 17, 'b2'), (75, 75, 'a3'), (75, 75, 'a1'), (75, 75, 'a0'), (75, 75, 'a2'), (76, 60, 'b2'), (79, 134, 'b1'), (80, 2, 'a1'), (80, 147, 'a0'), (80, 1, 'a2'), (81, 117, 'b0'), (85, 51, 'b3'), (86, 26, 'b2'), (87, 60, 'b1'), (87, 105, 'b0'), (89, 139, 'b0'), (90, 105, 'b0'), (91, 8, 'a1'), (91, 50, 'a0'), (91, 44, 'a2'), (92, 22, 'b2'), (95, 85, 'a3'), (95, 65, 'a1'), (95, 25, 'a0'), (95, 20, 'a2'), (96, 116, 'b0'), (98, 125, 'b1'), (101, 96, 'a3'), (101, 126, 'a1'), (101, 69, 'a0'), (101, 85, 'a2'), (102, 92, 'a2'), (102, 109, 'a1'), (102, 147, 'a4'), (102, 54, 'a3'), (102, 131, 'a0'), (103, 73, 'a1'), (103, 81, 'a0'), (103, 42, 'a2'), (105, 105, 'a0'), (106, 40, 'a0'), (109, 36, 'b2'), (109, 48, 'b0'), (110, 117, 'b0'), (111, 123, 'a1'), (111, 148, 'a0'), (111, 21, 'a2'), (112, 53, 'b0'), (113, 113, 'b0'), (113, 113, 'b4'), (113, 113, 'b3'), (114, 41, 'a1'), (114, 129, 'a0'), (115, 13, 'b1'), (116, 116, 'a2'), (116, 116, 'a1'), (116, 116, 'a4'), (117, 148, 'a0'), (118, 122, 'a2'), (118, 122, 'a4'), (118, 144, 'a1'), (118, 130, 'a3'), (118, 79, 'a0'), (121, 139, 'b0'), (122, 117, 'b4'), (123, 123, 'b2'), (123, 123, 'b3'), (123, 123, 'b0'), (124, 124, 'b1'), (125, 92, 'a1'), (125, 19, 'a0'), (126, 111, 'b0'), (128, 41, 'a1'), (128, 54, 'a0'), (129, 135, 'b0'), (130, 130, 'b0'), (131, 118, 'b4'), (132, 26, 'b1'), (133, 12, 'b0'), (134, 148, 'a0'), (135, 73, 'a1'), (135, 27, 'a0'), (137, 22, 'b0'), (138, 85, 'a0'), (139, 90, 'a1'), (139, 137, 'a0'), (139, 8, 'a2'), (140, 13, 'b0'), (141, 95, 'b1'), (141, 95, 'b0'), (143, 9, 'a0'), (144, 105, 'b1'), (146, 76, 'a1'), (146, 147, 'a0'), (147, 26, 'b2'), (148, 13, 'b1'), (149, 64, 'b1')]
2023-09-16 04:00:28.360 | DEBUG    | solvers:solve:280 - Base game solved. 
Final: {105, 130, 123}.
Winning nodes P2: {64, 33, 96, 38, 70, 42, 75, 76, 124, 113, 116, 149, 87, 25, 60}.
Winning nodes P1: {1, 2, 4, 8, 9, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 34, 35, 36, 40, 41, 44, 48, 49, 50, 51, 52, 53, 54, 56, 63, 65, 66, 67, 68, 69, 71, 73, 74, 79, 80, 81, 85, 86, 89, 90, 91, 92, 95, 98, 101, 102, 103, 105, 106, 109, 110, 111, 112, 114, 115, 117, 118, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148}.
2023-09-16 04:00:28.360 | DEBUG    | solvers:solve:298 - Value of deception: 0.9381443298969072
2023-09-16 04:00:28.362 | SUCCESS  | __main__:<module>:43 - Q. What is VoD if first three fakes were placed at where the first three traps were placed?
A. VoD(dswin, trap={105, 123, 130})=0.9381, VoD(dswin,fake={105, 123, 130})=0.9381443298969072
